# This file autogenerated through https://github.com/timholy/SnoopCompile.jl.  Precompile every day!
function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Nettle.call, (Type{Nettle.Decryptor}, ASCIIString, Array{UInt8, 1},))
    precompile(Nettle.call, (Type{Nettle.HMACState}, ASCIIString, Array{UInt8, 1},))
    precompile(Nettle.call, (Type{Nettle.CipherType}, Nettle.NettleCipher,))
    precompile(Nettle.call, (Type{Nettle.HashType}, Nettle.NettleHash, Ptr{Void},))
    precompile(Nettle.call, (Type{Nettle.Encryptor}, ASCIIString, Array{UInt8, 1},))
    precompile(Nettle.call, (Type{Nettle.Hasher}, ASCIIString,))
    precompile(Nettle.call, (Type{Nettle.HMACState}, ASCIIString, ASCIIString,))
    precompile(Nettle.encrypt!, (Nettle.Encryptor, Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Nettle.decrypt!, (Nettle.Decryptor, Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Nettle.digest!, (Nettle.HMACState,))
    precompile(Nettle.get_cipher_types, ())
    precompile(Nettle.get_hash_types, ())
    precompile(Nettle.digest!, (Nettle.Hasher,))
    precompile(Nettle.call, (Type{Nettle.HashType}, ASCIIString, UInt32, UInt32, UInt32, Ptr{Void}, Ptr{Void}, Ptr{Void}, Ptr{Void},))
    precompile(Nettle.get_libnettle_version, ())
    precompile(Nettle.call, (Type{Nettle.CipherType}, ASCIIString, UInt32, UInt32, UInt32, Ptr{Void}, Ptr{Void}, Ptr{Void}, Ptr{Void},))
    precompile(Nettle.update!, (Nettle.HMACState, Array{UInt8, 1},))
    precompile(Nettle.update!, (Nettle.Hasher, ASCIIString,))
    precompile(Nettle.decrypt, (ASCIIString, Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Nettle.update!, (Nettle.HMACState, ASCIIString,))
    precompile(Nettle.encrypt, (ASCIIString, Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Nettle.calc_hmac, (ASCIIString, Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Nettle.calc_hmac, (ASCIIString, Array{UInt8, 1}, ASCIIString,))
    precompile(Nettle.calc_hmac, (ASCIIString, ASCIIString, ASCIIString,))
    precompile(Nettle.calc_hash, (ASCIIString, ASCIIString,))
    precompile(Nettle.hexdigest!, (Nettle.Hasher,))
    precompile(Nettle.__init__, ())
end
